<?php
/**
 * Created by PhpStorm.
 * User: Chris
 * Date: 3/17/2018
 * Time: 2:22 PM
 */

namespace AppBundle\Controller;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use AppBundle\Form\PublicationType;
use BackendBundle\Entity\Publication;
use Symfony\Component\HttpFoundation\Session\Session;
use Symfony\Component\HttpFoundation\JsonResponse;


class PublicationController extends Controller{

    private $session;

    public function __construct() {
        $this->session = new Session();
    }
    /**
     * @Route("/home", name="home")
     */
    public function indexAction(Request $request){

        $em = $this->getDoctrine()->getManager();
        $publication = new Publication();
        $form = $this->createForm(PublicationType::class, $publication);
        $now = new \DateTime('now');


        $form->handleRequest($request);

        if($form->isSubmitted() ){
            if($form->isValid()){
                // upload file
                $image = $form["image"]->getData();

                if(!empty($image) && $image != null){

                    $image_name = $this->generateUniqueFileName().'.'.$image->guessExtension();

                    $image->move(
                      $this->getParameter('publication_image_directory'),
                      $image_name
                    );
                    $publication->setImage($image_name);

                }else{
                    $publication->setImage(null);
                }

                $document = $form["document"]->getData();

                if(!empty($document) && $document != null){

                    $document_name = $this->generateUniqueFileName().'.'.'pdf';

                    $document->move(
                      $this->getParameter('publication_document_directory'),
                      $document_name
                    );
                    $publication->setDocument($document_name);

                }else{
                    $publication->setDocument(null);
                }

                $publication->setStatus('1');
                $publication->setUser($this->getUser('id'));
                $publication->setCreatedAt($now);

                $em->persist($publication);
                $flush = $em->flush();

                if($flush == NULL){
                    $status = 'Your publication has been published.';
                }else{
                    $status = 'Something went wrong.';
                }

            }else{
                $status = 'There was a problem creating your publication.';
            }

            $this->session->getFlashBag()->add('status', $status);
            return $this->redirect('home');
        }

        $publications = $this->getPublication($request);

        return $this->render('Publication/home.html.twig', ['form' => $form->createView(), 'pagination' => $publications]);
    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    public function getPublication($request){
        $em = $this->getDoctrine()->getManager();
        $user = $this->getUser();

        $publication_info = $em->getRepository('BackendBundle:Publication');
        $following = $em->getRepository('BackendBundle:Following')->findBy(['user' => $user]);

        /*'SELECT text FROM publications WHERE user_id = :id
                OR user_id IN (SELECT followed FROM following WHERE user = :id)';*/

        $following_array = [];
        foreach($following as $follow){
            $following_array[] = $follow->getFollowed();
        }

        $query = $publication_info->createQueryBuilder('p')
                ->where('p.user = (:user_id) OR p.user IN (:following)')
                ->setParameter('user_id', $user->getId())
                ->setParameter('following', $following_array)
                ->orderBy('p.createdAt', 'DESC')
                ->getQuery();

        $paginator = $this->get('knp_paginator');
        $pagination = $paginator->paginate(
                      $query,
                      $request->query->getInt('page', 1),
                      5
                    );

        return $pagination;
    }

    /**
     * @Route("/remove-publication", name="removePublication")
     */
    public function removePublicationAction(Request $request){
        $em = $this->getDoctrine()->getManager();
        $id = $request->get('id');

        $publication = $em->getRepository('BackendBundle:Publication')->find($id);
        $user = $this->getUser();

        if($user->getId() == $publication->getUser()->getId()){
            //TODO: delete image and/or document
            $em->remove($publication);
            $flush = $em->flush();

            if($flush == null){
                $status = 'Your post has been removed.';
            }else{
                $status = 'There was a problem with removing your post.';
            }
        }else{
            $status = 'You are not allowed to remove this post.';
        }

        return new JsonResponse(['status' => $status]);
    }
}