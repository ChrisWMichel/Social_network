<?php
/**
 * Created by PhpStorm.
 * User: Chris
 * Date: 3/28/2018
 * Time: 10:56 AM
 */

namespace AppBundle\Controller;

use AppBundle\Form\PrivateMessageType;
use Symfony\Component\HttpFoundation\JsonResponse;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use BackendBundle\Entity\User;
use BackendBundle\Entity\PrivateMessage;
use Symfony\Component\HttpFoundation\Session\Session;


class PrivateMessagesController extends Controller{

    private $session;

    public function __construct() {
        $this->session = new Session();
    }

    /**
     * @Route("/private-message", name="private_message")
     */
    public function indexAction(Request $request){
        $em = $this->getDoctrine()->getManager();
        $user = $this->getUser();

        $private_message = new PrivateMessage();
        $form = $this->createForm(PrivateMessageType::class, $private_message, ['empty_data' => $user]);

        $form->handleRequest($request);

        if($form->isSubmitted() && $form->isValid()){

            $now = new \DateTime('now');
            // upload file
            $image = $form["image"]->getData();

            if(!empty($image) && $image != null){

                $image_name = $this->generateUniqueFileName().'.'.$image->guessExtension();

                $image->move(
                  $this->getParameter('message_image_directory'),
                  $image_name
                );
                $private_message->setImage($image_name);

            }else{
                $private_message->setImage(null);
            }

            $document = $form["file"]->getData();

            if(!empty($document) && $document != null){

                $document_name = $this->generateUniqueFileName().'.'.'pdf';

                $document->move(
                  $this->getParameter('publication_document_directory'),
                  $document_name
                );
                $private_message->setFile($document_name);

            }else{
                $private_message->setFile(null);
            }


            $private_message->setEmitter($user);
            $private_message->setCreatedAt($now);
            $private_message->setReaded(0);

            $em->persist($private_message);
            $flush = $em->flush();

            if($flush == NULL){
                $status = 'Your message has been sent.';
            }else{
                $status = 'Something went wrong.';
            }

            $this->session->getFlashBag()->add('status', $status);

            return $this->redirectToRoute('private_message');
        }

        $private_messages = $this->getPrivateMessages($request);
        $this->setRead($em, $user);

      return $this->render('PrivateMessage/index.html.twig', [
          'form' => $form->createView(),
          'pagination' => $private_messages,
        ]);
    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/sent", name="sent")
     */
    public function SendedAction(Request $request){
        $private_messages = $this->getPrivateMessages($request, 'sended');

        return $this->render('PrivateMessage/sended.html.twig', ['pagination' => $private_messages]);
    }

    public function getPrivateMessages($request, $type = null){
        $em = $this->getDoctrine()->getManager();
        $user = $this->getUser();
        $user_id = $user->getId();

        if($type == 'sended'){
            $sql = "SELECT p FROM BackendBundle:PrivateMessage p WHERE p.emitter = $user_id ORDER BY p.id DESC";

        }else{
            $sql = "SELECT p FROM BackendBundle:PrivateMessage p WHERE p.receiver = $user_id ORDER BY p.id DESC";
        }

        $query = $em->createQuery($sql);

        $paginator = $this->get('knp_paginator');
        $pagination = $paginator->paginate(
          $query,
          $request->query->getInt('page', 1),
          5
        );

        return $pagination;
    }

    /**
     * @Route("/private-message/not-read", name="not_read_count")
     */
    public function notReadAction(){
        $em = $this->getDoctrine()->getManager();
        $user = $this->getUser();

        $private_message = $em->getRepository('BackendBundle:PrivateMessage');
        $count_not_read_msg = count($private_message->findBy([
          'receiver' => $user,
            'readed' => 0
        ]));

        return new JsonResponse(['count' => $count_not_read_msg]);

    }

    private function setRead($em, $user){
        $messages = $em->getRepository('BackendBundle:PrivateMessage')->findBy([
          'receiver' => $user,
            'readed' => 0
        ]);

        foreach($messages as $msg){
            $msg->setReaded(1);

            $em->persist($msg);
        }

        $em->flush();

        return true;

    }

}